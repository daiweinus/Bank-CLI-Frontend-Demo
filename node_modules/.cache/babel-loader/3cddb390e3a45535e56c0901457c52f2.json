{"ast":null,"code":"var _jsxFileName = \"/Users/daiwei/Desktop/frontend_demo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const initialResponse = [{\n    commandText: '',\n    helloText: '',\n    transferredText: [],\n    loginOweText: [],\n    balanceText: '',\n    oweText: [],\n    message: ''\n  }];\n  const [responseArray, setResponseArray] = useState(initialResponse);\n  let command = '';\n  useEffect(() => {\n    // command listener\n    const listener = event => {\n      if (event.code !== \"Enter\") {\n        return;\n      }\n\n      event.preventDefault();\n      command = document.getElementById(\"command\").value;\n      document.getElementById(\"command\").value = '';\n      let commandArr = command.split(\" \");\n      let action = commandArr[0].toLowerCase();\n\n      switch (action) {\n        case 'login':\n          {\n            localStorage.setItem('loginUser', capitalize(commandArr[1]));\n            let data = \"userName=\" + capitalize(commandArr[1]);\n\n            if (commandArr.length !== 2) {\n              showError(command);\n              return;\n            }\n\n            return callBackendAPI(action, data);\n          }\n\n        case 'topup':\n          {\n            let loginClient = localStorage.getItem('loginUser');\n\n            if (commandArr.length !== 2 || isNumeric(commandArr[1]) === false) {\n              showError(command);\n              return;\n            }\n\n            let data = \"userName=\" + loginClient + \"&amount=\" + commandArr[1];\n            return callBackendAPI(action, data);\n          }\n\n        case 'pay':\n          {\n            let loginClient = localStorage.getItem('loginUser');\n\n            if (commandArr.length !== 3 || isNumeric(commandArr[2]) === false) {\n              showError(command);\n              return;\n            }\n\n            let anotherClientName = capitalize(commandArr[1]);\n            let data = \"userName=\" + loginClient + \"&anotherUserName=\" + anotherClientName + \"&amount=\" + commandArr[2];\n            return callBackendAPI(action, data);\n          }\n\n        case 'clear':\n          {\n            setResponseArray(initialResponse);\n            return;\n          }\n\n        default:\n          {\n            showError(command);\n            return;\n          }\n      }\n    }; //call backend API\n\n\n    function callBackendAPI(action, data) {\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: data\n      };\n      fetch('/command/' + action, requestOptions).then(response => response.json()).then(responseJson => {\n        if (responseJson.isSuccess) {\n          //parsing response object\n          let data = responseJson.data;\n          let helloText = '';\n\n          if (action === 'login') {\n            helloText = 'Hello, ' + data.user.user + '!';\n          }\n\n          let transferredText = [];\n\n          if (responseJson.transfer && responseJson.transfer.length > 0) {\n            transferredText = responseJson.transfer;\n          }\n\n          let loginOweText = [];\n\n          if (data.collection.length > 0) {\n            loginOweText = data.collection;\n          }\n\n          let balanceText = 'Your balance is $' + data.user.balance + '.' + '\\n';\n          let oweText = [];\n\n          if (data.debt.length > 0) {\n            oweText = data.debt;\n          }\n\n          let res = {\n            commandText: '> ' + command,\n            helloText: helloText,\n            transferredText: transferredText,\n            loginOweText: loginOweText,\n            balanceText: balanceText,\n            oweText: oweText\n          };\n          setResponseArray(oldArray => [...oldArray, res]);\n          checkSpanHidden();\n        } else {\n          let errorMessage = responseJson.errorMessage;\n          showError(command, errorMessage);\n        }\n      }).catch(console.error);\n    } // error message\n\n\n    function showError(commandText, errMsg) {\n      let message = 'Sorry, this command is undefined, please try again.';\n\n      if (errMsg != null && errMsg !== '') {\n        message = errMsg;\n      }\n\n      let res = {\n        commandText: '> ' + commandText,\n        helloText: '',\n        transferredText: [],\n        loginOweText: [],\n        balanceText: '',\n        oweText: [],\n        message: message\n      };\n      setResponseArray(oldArray => [...oldArray, res]);\n      checkSpanHidden();\n    } //check hidden span\n\n\n    function checkSpanHidden() {\n      const spanList = document.querySelectorAll(\"span\");\n      spanList.forEach(span => {\n        if (span.innerText === '') {\n          span.classList.add('hidden');\n        } else {\n          span.classList.remove('hidden');\n        }\n      });\n    } //check if numeric\n\n\n    function isNumeric(num) {\n      return !isNaN(num);\n    } //capitalize username\n\n\n    function capitalize(name) {\n      return name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();\n    }\n\n    document.addEventListener(\"keydown\", listener);\n    return () => {\n      document.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"command-container\",\n      children: responseArray.map(response => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: response.commandText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: response.helloText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this), response.transferredText.map(transfer => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: [\"Transferred $\", transfer.transactedAmount, \" to \", transfer.transactedUser, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }, this)), response.loginOweText.map(collect => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: [\"Owing $\", collect.amount, \" from \", collect.collectionName, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: response.balanceText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), response.oweText.map(debt => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: [\"Owing $\", debt.amount, \" to \", debt.debtUser, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: response.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text\",\n          children: \"\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\">\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"command\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"VSXuaWCX5IPBnY1OEaaeRrHbUL0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/daiwei/Desktop/frontend_demo/src/App.js"],"names":["React","useEffect","useState","App","initialResponse","commandText","helloText","transferredText","loginOweText","balanceText","oweText","message","responseArray","setResponseArray","command","listener","event","code","preventDefault","document","getElementById","value","commandArr","split","action","toLowerCase","localStorage","setItem","capitalize","data","length","showError","callBackendAPI","loginClient","getItem","isNumeric","anotherClientName","requestOptions","method","headers","body","fetch","then","response","json","responseJson","isSuccess","user","transfer","collection","balance","debt","res","oldArray","checkSpanHidden","errorMessage","catch","console","error","errMsg","spanList","querySelectorAll","forEach","span","innerText","classList","add","remove","num","isNaN","name","substring","toUpperCase","addEventListener","removeEventListener","map","transactedAmount","transactedUser","collect","amount","collectionName","debtUser"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n    const initialResponse = [{\n        commandText: '',\n        helloText: '',\n        transferredText: [],\n        loginOweText: [],\n        balanceText: '',\n        oweText: [],\n        message: ''\n    }];\n    const [responseArray, setResponseArray] = useState(initialResponse)\n\n    let command = '';\n\n    useEffect(() => {\n\n        // command listener\n        const listener = event => {\n            if (event.code !== \"Enter\") {\n                return;\n            }\n            event.preventDefault();\n            command = document.getElementById(\"command\").value;\n            document.getElementById(\"command\").value = '';\n            let commandArr = command.split(\" \");\n            let action = commandArr[0].toLowerCase();\n\n            switch (action) {\n                case 'login': {\n                    localStorage.setItem('loginUser', capitalize(commandArr[1]));\n                    let data = \"userName=\" + capitalize(commandArr[1]);\n                    if (commandArr.length !== 2) {\n                        showError(command);\n                        return;\n                    }\n                    return callBackendAPI(action, data)\n                }\n\n                case 'topup': {\n                    let loginClient = localStorage.getItem('loginUser');\n                    if (commandArr.length !== 2 || isNumeric(commandArr[1]) === false) {\n                        showError(command);\n                        return;\n                    }\n                    let data = \"userName=\" + loginClient + \"&amount=\" + commandArr[1];\n                    return callBackendAPI(action, data)\n                }\n\n                case 'pay': {\n                    let loginClient = localStorage.getItem('loginUser');\n                    if (commandArr.length !== 3 || isNumeric(commandArr[2]) === false) {\n                        showError(command);\n                        return;\n                    }\n                    let anotherClientName = capitalize(commandArr[1]);\n                    let data = \"userName=\" + loginClient + \"&anotherUserName=\" + anotherClientName + \"&amount=\" + commandArr[2];\n                    return callBackendAPI(action, data)\n                }\n\n                case 'clear': {\n                    setResponseArray(initialResponse);\n                    return\n                }\n\n                default: {\n                    showError(command);\n                    return\n                }\n\n\n            }\n        };\n\n        //call backend API\n        function callBackendAPI(action, data) {\n            const requestOptions = {\n                method: 'POST',\n                headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n                body: data\n            };\n            fetch('/command/' + action, requestOptions)\n                .then(response => response.json())\n                .then(responseJson => {\n                    if (responseJson.isSuccess) {\n                        //parsing response object\n                        let data = responseJson.data;\n                        let helloText = '';\n                        if (action === 'login') {\n                            helloText = 'Hello, ' + data.user.user + '!';\n                        }\n                        let transferredText = [];\n                        if (responseJson.transfer && responseJson.transfer.length > 0) {\n                            transferredText = responseJson.transfer;\n                        }\n                        let loginOweText = [];\n                        if (data.collection.length > 0) {\n                            loginOweText = data.collection;\n                        }\n                        let balanceText = 'Your balance is $' + data.user.balance + '.' + '\\n';\n                        let oweText = [];\n                        if (data.debt.length > 0) {\n                            oweText = data.debt;\n                        }\n                        let res = {\n                            commandText: '> ' + command,\n                            helloText: helloText,\n                            transferredText: transferredText,\n                            loginOweText: loginOweText,\n                            balanceText: balanceText,\n                            oweText: oweText\n                        }\n                        setResponseArray(oldArray => [...oldArray, res]);\n                        checkSpanHidden()\n                    } else {\n                        let errorMessage = responseJson.errorMessage;\n                        showError(command, errorMessage);\n                    }\n                })\n                .catch(console.error);\n        }\n\n        // error message\n        function showError(commandText, errMsg) {\n            let message = 'Sorry, this command is undefined, please try again.'\n            if (errMsg != null && errMsg !== '') {\n                message = errMsg;\n            }\n            let res = {\n                commandText: '> ' + commandText,\n                helloText: '',\n                transferredText: [],\n                loginOweText: [],\n                balanceText: '',\n                oweText: [],\n                message: message\n            }\n            setResponseArray(oldArray => [...oldArray, res]);\n            checkSpanHidden()\n        }\n\n        //check hidden span\n        function checkSpanHidden() {\n            const spanList = document.querySelectorAll(\"span\");\n            spanList.forEach(span => {\n                if (span.innerText === '') {\n                    span.classList.add('hidden');\n                } else {\n                    span.classList.remove('hidden');\n                }\n            });\n        }\n\n        //check if numeric\n        function isNumeric(num) {\n            return !isNaN(num)\n        }\n\n        //capitalize username\n        function capitalize(name) {\n            return name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();\n        }\n\n        document.addEventListener(\"keydown\", listener);\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, []);\n\n    return (\n        <div>\n            <div id=\"command-container\">\n                {responseArray.map(response => (\n                    <div>\n                        <span className=\"app-text hidden\">{response.commandText}</span>\n                        <span className=\"app-text hidden\">{response.helloText}</span>\n                        {response.transferredText.map(transfer => (\n                            <span\n                                className=\"app-text hidden\">Transferred ${transfer.transactedAmount} to {transfer.transactedUser}.</span>\n                        ))}\n                        {response.loginOweText.map(collect => (\n                            <span\n                                className=\"app-text hidden\">Owing ${collect.amount} from {collect.collectionName}.</span>\n                        ))}\n                        <span className=\"app-text hidden\">{response.balanceText}</span>\n                        {response.oweText.map(debt => (\n                            <span className=\"app-text hidden\">Owing ${debt.amount} to {debt.debtUser}.</span>\n                        ))}\n                        <span className=\"app-text hidden\">{response.message}</span>\n                        <span className=\"app-text\">&nbsp;</span>\n                    </div>\n                ))}\n            </div>\n            <span>>&nbsp;\n                <input type=\"text\" id=\"command\"  autoFocus>\n                </input>\n            </span>\n        </div>\n    );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}