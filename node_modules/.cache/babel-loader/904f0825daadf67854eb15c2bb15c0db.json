{"ast":null,"code":"var _jsxFileName = \"/Users/daiwei/Desktop/Bank-CLI-Frontend-Demo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const initialResponse = [{\n    commandText: '',\n    helloText: '',\n    transactionText: [],\n    loginOweText: [],\n    balanceText: '',\n    oweText: [],\n    message: ''\n  }];\n  const [responseArray, setResponseArray] = useState(initialResponse);\n  let command = '';\n  useEffect(() => {\n    // command listener\n    const listener = event => {\n      if (event.code !== \"Enter\") {\n        return;\n      }\n\n      event.preventDefault();\n      command = document.getElementById(\"command\").value;\n      document.getElementById(\"command\").value = '';\n      let commandArr = command.trim().split(\" \");\n      let action = commandArr[0].toLowerCase();\n\n      switch (action) {\n        case 'login':\n          {\n            if (commandArr.length != 2) {\n              showError(command);\n              return;\n            }\n\n            localStorage.setItem('loginUser', capitalize(commandArr[1]));\n            let data = \"username=\" + capitalize(commandArr[1]);\n            return callBackendAPI(action, data);\n          }\n\n        case 'topup':\n          {\n            let loginClient = localStorage.getItem('loginUser');\n\n            if (commandArr.length !== 2 || isNumeric(commandArr[1]) === false) {\n              showError(command);\n              return;\n            }\n\n            let data = \"username=\" + loginClient + \"&amount=\" + commandArr[1];\n            return callBackendAPI(action, data);\n          }\n\n        case 'pay':\n          {\n            let loginClient = localStorage.getItem('loginUser');\n\n            if (commandArr.length !== 3 || isNumeric(commandArr[2]) === false) {\n              showError(command);\n              return;\n            }\n\n            let anotherClientName = capitalize(commandArr[1]);\n            let data = \"payerName=\" + loginClient + \"&payeeName=\" + anotherClientName + \"&amount=\" + commandArr[2];\n            return callBackendAPI(action, data);\n          }\n\n        case 'clear':\n          {\n            setResponseArray(initialResponse);\n            return;\n          }\n\n        default:\n          {\n            showError(command);\n            return;\n          }\n      }\n    }; //call backend API\n\n\n    function callBackendAPI(action, data) {\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: data\n      };\n      fetch('/command/' + action, requestOptions).then(response => response.json()).then(responseJson => {\n        if (responseJson.isSuccess) {\n          //parsing response object\n          let data = responseJson.data;\n          let helloText = '';\n\n          if (action === 'login') {\n            helloText = 'Hello, ' + data.user.username + '!';\n          }\n\n          let transactionText = [];\n\n          if (responseJson.transaction && responseJson.transaction.length > 0) {\n            transactionText = responseJson.transaction;\n          }\n\n          let loginOweText = [];\n\n          if (data.creditor.length > 0) {\n            loginOweText = data.creditor;\n          }\n\n          let balanceText = 'Your balance is $' + data.user.balance + '.' + '\\n';\n          let oweText = [];\n\n          if (data.debtor.length > 0) {\n            oweText = data.debtor;\n          }\n\n          let res = {\n            commandText: '> ' + command,\n            helloText: helloText,\n            transactionText: transactionText,\n            loginOweText: loginOweText,\n            balanceText: balanceText,\n            oweText: oweText\n          };\n          setResponseArray(oldArray => [...oldArray, res]);\n          checkSpanHidden();\n        } else {\n          let errorMessage = responseJson.errorMessage;\n          showError(command, errorMessage);\n        }\n      }).catch(console.error);\n    } // error message\n\n\n    function showError(commandText, errMsg) {\n      let message = 'Sorry, this command is undefined, please try again.';\n\n      if (errMsg != null && errMsg !== '') {\n        message = errMsg;\n      }\n\n      let res = {\n        commandText: '> ' + commandText,\n        helloText: '',\n        transactionText: [],\n        loginOweText: [],\n        balanceText: '',\n        oweText: [],\n        message: message\n      };\n      setResponseArray(oldArray => [...oldArray, res]);\n      checkSpanHidden();\n    } //check hidden span\n\n\n    function checkSpanHidden() {\n      const spanList = document.querySelectorAll(\"span\");\n      spanList.forEach(span => {\n        if (span.innerText === '') {\n          span.classList.add('hidden');\n        } else {\n          span.classList.remove('hidden');\n        }\n      });\n    } //check if numeric\n\n\n    function isNumeric(num) {\n      return !isNaN(num);\n    } //capitalize username\n\n\n    function capitalize(name) {\n      return name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();\n    }\n\n    document.addEventListener(\"keydown\", listener);\n    return () => {\n      document.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"command-container\",\n      children: responseArray.map(response => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: response.commandText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: response.helloText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }, this), response.transactionText.map(transaction => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: [\"Transferred $\", transaction.transactionAmount, \" to \", transaction.transactionName, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)), response.loginOweText.map(creditor => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: [\"Owing $\", creditor.amount, \" from \", creditor.debtorName, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: response.balanceText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this), response.oweText.map(debtor => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: [\"Owing $\", debtor.amount, \" to \", debtor.creditorName, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text hidden\",\n          children: response.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"app-text\",\n          children: \"\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\">\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"command\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"VSXuaWCX5IPBnY1OEaaeRrHbUL0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/daiwei/Desktop/Bank-CLI-Frontend-Demo/src/App.js"],"names":["React","useEffect","useState","App","initialResponse","commandText","helloText","transactionText","loginOweText","balanceText","oweText","message","responseArray","setResponseArray","command","listener","event","code","preventDefault","document","getElementById","value","commandArr","trim","split","action","toLowerCase","length","showError","localStorage","setItem","capitalize","data","callBackendAPI","loginClient","getItem","isNumeric","anotherClientName","requestOptions","method","headers","body","fetch","then","response","json","responseJson","isSuccess","user","username","transaction","creditor","balance","debtor","res","oldArray","checkSpanHidden","errorMessage","catch","console","error","errMsg","spanList","querySelectorAll","forEach","span","innerText","classList","add","remove","num","isNaN","name","substring","toUpperCase","addEventListener","removeEventListener","map","transactionAmount","transactionName","amount","debtorName","creditorName"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const initialResponse = [{\n    commandText: '',\n    helloText: '',\n    transactionText: [],\n    loginOweText: [],\n    balanceText: '',\n    oweText: [],\n    message: ''\n  }];\n  const [responseArray, setResponseArray] = useState(initialResponse)\n\n  let command = '';\n\n  useEffect(() => {\n\n    // command listener\n    const listener = event => {\n      if (event.code !== \"Enter\") {\n        return;\n      }\n      event.preventDefault();\n      command = document.getElementById(\"command\").value;\n      document.getElementById(\"command\").value = '';\n      let commandArr = command.trim().split(\" \");\n      let action = commandArr[0].toLowerCase();\n\n      switch (action) {\n        case 'login': {\n          if (commandArr.length != 2){\n            showError(command);\n            return;\n          }\n          localStorage.setItem('loginUser', capitalize(commandArr[1]));\n          let data = \"username=\" + capitalize(commandArr[1]);\n          return callBackendAPI(action, data)\n        }\n\n        case 'topup': {\n          let loginClient = localStorage.getItem('loginUser');\n          if (commandArr.length !== 2 || isNumeric(commandArr[1]) === false) {\n            showError(command);\n            return;\n          }\n          let data = \"username=\" + loginClient + \"&amount=\" + commandArr[1];\n          return callBackendAPI(action, data)\n        }\n\n        case 'pay': {\n          let loginClient = localStorage.getItem('loginUser');\n          if (commandArr.length !== 3 || isNumeric(commandArr[2]) === false) {\n            showError(command);\n            return;\n          }\n          let anotherClientName = capitalize(commandArr[1]);\n          let data = \"payerName=\" + loginClient + \"&payeeName=\" + anotherClientName + \"&amount=\" + commandArr[2];\n          return callBackendAPI(action, data)\n        }\n\n        case 'clear': {\n          setResponseArray(initialResponse);\n          return\n        }\n\n        default: {\n          showError(command);\n          return\n        }\n\n\n      }\n    };\n\n    //call backend API\n    function callBackendAPI(action, data) {\n      const requestOptions = {\n        method: 'POST',\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n        body: data\n      };\n      fetch('/command/' + action, requestOptions)\n          .then(response => response.json())\n          .then(responseJson => {\n            if (responseJson.isSuccess) {\n              //parsing response object\n              let data = responseJson.data;\n              let helloText = '';\n              if (action === 'login') {\n                helloText = 'Hello, ' + data.user.username + '!';\n              }\n              let transactionText = [];\n              if (responseJson.transaction && responseJson.transaction.length > 0) {\n                transactionText = responseJson.transaction;\n              }\n              let loginOweText = [];\n              if (data.creditor.length > 0) {\n                loginOweText = data.creditor;\n              }\n              let balanceText = 'Your balance is $' + data.user.balance + '.' + '\\n';\n              let oweText = [];\n              if (data.debtor.length > 0) {\n                oweText = data.debtor;\n              }\n              let res = {\n                commandText: '> ' + command,\n                helloText: helloText,\n                transactionText: transactionText,\n                loginOweText: loginOweText,\n                balanceText: balanceText,\n                oweText: oweText\n              }\n              setResponseArray(oldArray => [...oldArray, res]);\n              checkSpanHidden()\n            } else {\n              let errorMessage = responseJson.errorMessage;\n              showError(command, errorMessage);\n            }\n          })\n          .catch(console.error);\n    }\n\n    // error message\n    function showError(commandText, errMsg) {\n      let message = 'Sorry, this command is undefined, please try again.'\n      if (errMsg != null && errMsg !== '') {\n        message = errMsg;\n      }\n      let res = {\n        commandText: '> ' + commandText,\n        helloText: '',\n        transactionText: [],\n        loginOweText: [],\n        balanceText: '',\n        oweText: [],\n        message: message\n      }\n      setResponseArray(oldArray => [...oldArray, res]);\n      checkSpanHidden()\n    }\n\n    //check hidden span\n    function checkSpanHidden() {\n      const spanList = document.querySelectorAll(\"span\");\n      spanList.forEach(span => {\n        if (span.innerText === '') {\n          span.classList.add('hidden');\n        } else {\n          span.classList.remove('hidden');\n        }\n      });\n    }\n\n    //check if numeric\n    function isNumeric(num) {\n      return !isNaN(num)\n    }\n\n    //capitalize username\n    function capitalize(name) {\n      return name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();\n    }\n\n    document.addEventListener(\"keydown\", listener);\n    return () => {\n      document.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n\n  return (\n      <div>\n        <div id=\"command-container\">\n          {responseArray.map(response => (\n              <div>\n                <span className=\"app-text hidden\">{response.commandText}</span>\n                <span className=\"app-text hidden\">{response.helloText}</span>\n                {response.transactionText.map(transaction => (\n                    <span\n                        className=\"app-text hidden\">Transferred ${transaction.transactionAmount} to {transaction.transactionName}.</span>\n                ))}\n                {response.loginOweText.map(creditor => (\n                    <span\n                        className=\"app-text hidden\">Owing ${creditor.amount} from {creditor.debtorName}.</span>\n                ))}\n                <span className=\"app-text hidden\">{response.balanceText}</span>\n                {response.oweText.map(debtor => (\n                    <span className=\"app-text hidden\">Owing ${debtor.amount} to {debtor.creditorName}.</span>\n                ))}\n                <span className=\"app-text hidden\">{response.message}</span>\n                <span className=\"app-text\">&nbsp;</span>\n              </div>\n          ))}\n        </div>\n        <span>>&nbsp;\n          <input type=\"text\" id=\"command\"  autoFocus>\n                </input>\n            </span>\n      </div>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}